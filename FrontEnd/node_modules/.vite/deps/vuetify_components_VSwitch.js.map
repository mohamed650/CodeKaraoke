{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSwitch/VSwitch.tsx"],
  "sourcesContent": ["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { VScaleTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { ref, toRef, useId } from 'vue'\nimport { filterInputAttrs, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, Ref } from 'vue'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport type { IconValue } from '@/composables/icons'\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { GenericProps } from '@/util'\n\nexport type VSwitchSlot = {\n  model: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n}\n\nexport type VSwitchSlots =\n  & VInputSlots\n  & VSelectionControlSlots\n  & {\n    loader: LoaderSlotProps\n    thumb: { icon: IconValue | undefined } & VSwitchSlot\n    'track-false': VSwitchSlot\n    'track-true': VSwitchSlot\n  }\n\nexport const makeVSwitchProps = propsFactory({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false,\n  },\n\n  ...makeVInputProps(),\n  ...makeVSelectionControlProps(),\n}, 'VSwitch')\n\nexport const VSwitch = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VSwitchSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: makeVSwitchProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const control = ref<VSelectionControl>()\n    const inputRef = ref<VInput>()\n    const isForcedColorsModeActive = IN_BROWSER && window.matchMedia('(forced-colors: active)').matches\n\n    const loaderColor = toRef(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = useId()\n    const id = toRef(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n    function onTrackClick (e: Event) {\n      e.stopPropagation()\n      e.preventDefault()\n      control.value?.input?.click()\n    }\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const inputProps = VInput.filterProps(props)\n      const controlProps = VSelectionControl.filterProps(props)\n\n      return (\n        <VInput\n          ref={ inputRef }\n          class={[\n            'v-switch',\n            { 'v-switch--flat': props.flat },\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => {\n              const slotProps = {\n                model,\n                isValid,\n              }\n\n              return (\n                <VSelectionControl\n                  ref={ control }\n                  { ...controlProps }\n                  v-model={ model.value }\n                  id={ id.value }\n                  aria-describedby={ messagesId.value }\n                  type=\"checkbox\"\n                  onUpdate:modelValue={ onChange }\n                  aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  { ...controlAttrs }\n                >\n                  {{\n                    ...slots,\n                    default: ({ backgroundColorClasses, backgroundColorStyles }) => (\n                      <div\n                        class={[\n                          'v-switch__track',\n                          !isForcedColorsModeActive ? backgroundColorClasses.value : undefined,\n                        ]}\n                        style={ backgroundColorStyles.value }\n                        onClick={ onTrackClick }\n                      >\n                        { slots['track-true'] && (\n                          <div key=\"prepend\" class=\"v-switch__track-true\">\n                            { slots['track-true'](slotProps) }\n                          </div>\n                        )}\n\n                        { slots['track-false'] && (\n                          <div key=\"append\" class=\"v-switch__track-false\">\n                            { slots['track-false'](slotProps) }\n                          </div>\n                        )}\n                      </div>\n                    ),\n                    input: ({ inputNode, icon, backgroundColorClasses, backgroundColorStyles }) => (\n                      <>\n                        { inputNode }\n                        <div\n                          class={[\n                            'v-switch__thumb',\n                            { 'v-switch__thumb--filled': icon || props.loading },\n                            props.inset || isForcedColorsModeActive ? undefined : backgroundColorClasses.value,\n                          ]}\n                          style={ props.inset ? undefined : backgroundColorStyles.value }\n                        >\n                          { slots.thumb ? (\n                            <VDefaultsProvider\n                              defaults={{\n                                VIcon: {\n                                  icon,\n                                  size: 'x-small',\n                                },\n                              }}\n                            >\n                              { slots.thumb({ ...slotProps, icon }) }\n                            </VDefaultsProvider>\n                          ) : (\n                            <VScaleTransition>\n                              { !props.loading ? (\n                                (icon && (\n                                  <VIcon\n                                    key={ String(icon) }\n                                    icon={ icon }\n                                    size=\"x-small\"\n                                  />\n                                ))) : (\n                                <LoaderSlot\n                                  name=\"v-switch\"\n                                  active\n                                  color={ isValid.value === false ? undefined : loaderColor.value }\n                                >\n                                  { slotProps => (\n                                    slots.loader\n                                      ? slots.loader(slotProps)\n                                      : (\n                                        <VProgressCircular\n                                          active={ slotProps.isActive }\n                                          color={ slotProps.color }\n                                          indeterminate\n                                          size=\"16\"\n                                          width=\"2\"\n                                        />\n                                      )\n                                  )}\n                                </LoaderSlot>\n                              )}\n                            </VScaleTransition>\n                          )}\n                        </div>\n                      </>\n                    ),\n                  }}\n                </VSelectionControl>\n              )\n            },\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, inputRef)\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AA2CO,IAAMA,mBAAmBC,aAAa;EAC3CC,eAAeC;EACfC,OAAOD;EACPE,MAAMF;EACNG,SAAS;IACPC,MAAM,CAACJ,SAASK,MAAM;IACtBC,SAAS;EACX;EAEA,GAAGC,gBAAgB;EACnB,GAAGC,2BAA2B;AAChC,GAAG,SAAS;AAEL,IAAMC,UAAUC,iBAMwB,EAAE;EAC/CC,MAAM;EAENC,cAAc;EAEdC,OAAOhB,iBAAiB;EAExBiB,OAAO;IACL,kBAAmBC,aAAqB;IACxC,qBAAsBC,WAAe;IACrC,wBAAyBA,WAAmB;EAC9C;EAEAC,MAAOJ,OAAKK,MAAoB;AAAA,QAAlB;MAAEC;MAAOC;IAAM,IAACF;AAC5B,UAAMnB,gBAAgBsB,gBAAgBR,OAAO,eAAe;AAC5D,UAAMS,QAAQD,gBAAgBR,OAAO,YAAY;AACjD,UAAM;MAAEU;IAAc,IAAIC,UAAUX,KAAK;AACzC,UAAM;MAAEY;MAAWC;MAAOC;IAAK,IAAIC,SAASf,KAAK;AACjD,UAAMgB,UAAUC,IAAuB;AACvC,UAAMC,WAAWD,IAAY;AAC7B,UAAME,2BAA2BC,cAAcC,OAAOC,WAAW,yBAAyB,EAAEC;AAE5F,UAAMC,cAAcC,MAAM,MAAM;AAC9B,aAAO,OAAOzB,MAAMV,YAAY,YAAYU,MAAMV,YAAY,KAC1DU,MAAMV,UACNU,MAAM0B;IACZ,CAAC;AAED,UAAMC,MAAMC,MAAM;AAClB,UAAMC,KAAKJ,MAAM,MAAMzB,MAAM6B,MAAM,UAAUF,GAAG,EAAE;AAElD,aAASG,WAAY;AACnB,UAAI5C,cAAciB,OAAO;AACvBjB,sBAAciB,QAAQ;MACxB;IACF;AACA,aAAS4B,aAAcC,GAAU;;AAC/BA,QAAEC,gBAAgB;AAClBD,QAAEE,eAAe;AACjBlB,0BAAQb,UAARa,mBAAemB,UAAfnB,mBAAsBoB;IACxB;AAEAC,cAAU,MAAM;AACd,YAAM,CAACC,WAAWC,YAAY,IAAIC,iBAAiBlC,KAAK;AACxD,YAAMmC,aAAaC,OAAOC,YAAY3C,KAAK;AAC3C,YAAM4C,eAAeC,kBAAkBF,YAAY3C,KAAK;AAExD,aAAA8C,YAAAJ,QAAAK,WAAA;QAAA,OAEU7B;QAAQ,SACP,CACL,YACA;UAAE,kBAAkBlB,MAAMX;QAAK,GAC/B;UAAE,mBAAmBW,MAAMZ;QAAM,GACjC;UAAE,2BAA2BF,cAAciB;QAAM,GACjDO,cAAcP,OACdH,MAAMgD,KAAK;MACZ,GACIV,WACAG,YAAU;QAAA,cACLhC,MAAMN;QAAK,uBAAA8C,YAAXxC,MAAMN,QAAK8C;QAAA,MAChBpB,GAAG1B;QAAK,WACHS,UAAUT;QAAK,SACjBH,MAAMkD;MAAK,CAAA,GAAA;QAGjB,GAAG3C;QACHd,SAAS0D,WAMH;AAAA,cANI;YACRtB,IAAAA;YACAuB;YACAC;YACAC;YACAC;UACF,IAACJ;AACC,gBAAMK,YAAY;YAChB/C;YACA8C;UACF;AAEA,iBAAAT,YAAAD,mBAAAE,WAAA;YAAA,OAEU/B;UAAO,GACR4B,cAAY;YAAA,cACPnC,MAAMN;YAAK,uBAAA,CAAA8C,YAAXxC,MAAMN,QAAK8C,QAICnB,QAAQ;YAAA,MAHzBD,IAAG1B;YAAK,oBACMiD,WAAWjD;YAAK,QAAA;YAAA,gBAGpBjB,cAAciB,QAAQ,UAAUsD;YAAS,YAC7CJ,WAAWlD;YAAK,YAChBmD,WAAWnD;YAAK,WACjBU;YAAK,UACNC;UAAI,GACRyB,YAAY,GAAA;YAGf,GAAGhC;YACHd,SAASiE,WAAA;AAAA,kBAAC;gBAAEC;gBAAwBC;cAAsB,IAACF;AAAA,qBAAAG,gBAAA,OAAA;gBAAA,SAAAC,eAEhD,CACL,mBACA,CAAC3C,2BAA2BwC,uBAAuBxD,QAAQsD,MAAS,CACrE;gBAAA,SAAAM,eACOH,sBAAsBzD,KAAK;gBAAA,WACzB4B;cAAY,GAAA,CAEpBxB,MAAM,YAAY,KAACsD,gBAAA,OAAA;gBAAA,OAAA;gBAAA,SAAA;cAAA,GAAA,CAEftD,MAAM,YAAY,EAAEiD,SAAS,CAAC,CAAA,GAIlCjD,MAAM,aAAa,KAACsD,gBAAA,OAAA;gBAAA,OAAA;gBAAA,SAAA;cAAA,GAAA,CAEhBtD,MAAM,aAAa,EAAEiD,SAAS,CAAC,CAAA,CAEpC,CAAA;YAAA;YAGLrB,OAAO6B,WAAA;AAAA,kBAAC;gBAAEC;gBAAWC;gBAAMP;gBAAwBC;cAAsB,IAACI;AAAA,qBAAAH,gBAAAM,UAAA,MAAA,CAEpEF,WAASJ,gBAAA,OAAA;gBAAA,SAAAC,eAEF,CACL,mBACA;kBAAE,2BAA2BI,QAAQlE,MAAMV;gBAAQ,GACnDU,MAAMZ,SAAS+B,2BAA2BsC,SAAYE,uBAAuBxD,KAAK,CACnF;gBAAA,SAAA4D,eACO/D,MAAMZ,QAAQqE,SAAYG,sBAAsBzD,KAAK;cAAA,GAAA,CAE3DI,MAAM6D,QAAKtB,YAAAuB,mBAAA;gBAAA,YAEC;kBACRC,OAAO;oBACLJ;oBACAK,MAAM;kBACR;gBACF;cAAC,GAAA;gBAAA9E,SAAAA,MAAA,CAECc,MAAM6D,MAAM;kBAAE,GAAGZ;kBAAWU;gBAAK,CAAC,CAAC;cAAA,CAAA,IAAApB,YAAA0B,kBAAA,MAAA;gBAAA/E,SAAAA,MAAA,CAInC,CAACO,MAAMV,UACN4E,QAAIpB,YAAAwB,OAAA;kBAAA,OAEK9E,OAAO0E,IAAI;kBAAC,QACXA;kBAAI,QAAA;gBAAA,GAAA,IAAA,IAGdpB,YAAA2B,YAAA;kBAAA,QAAA;kBAAA,UAAA;kBAAA,SAISlB,QAAQpD,UAAU,QAAQsD,SAAYjC,YAAYrB;gBAAK,GAAA;kBAAAV,SAE7D+D,CAAAA,eACAjD,MAAMmE,SACFnE,MAAMmE,OAAOlB,UAAS,IAACV,YAAA6B,mBAAA;oBAAA,UAGZnB,WAAUoB;oBAAQ,SACnBpB,WAAU9B;oBAAK,iBAAA;oBAAA,QAAA;oBAAA,SAAA;kBAAA,GAAA,IAAA;gBAM9B,CAAA,CAEJ;cAAA,CAAA,CAEJ,CAAA,CAAA,CAAA;YAAA;UAGN,CAAA;QAIT;MAAC,CAAA;IAIT,CAAC;AAED,WAAOmD,YAAY,CAAC,GAAG3D,QAAQ;EACjC;AACF,CAAC;",
  "names": ["makeVSwitchProps", "propsFactory", "indeterminate", "Boolean", "inset", "flat", "loading", "type", "String", "default", "makeVInputProps", "makeVSelectionControlProps", "VSwitch", "genericComponent", "name", "inheritAttrs", "props", "emits", "focused", "value", "setup", "_ref", "attrs", "slots", "useProxiedModel", "model", "loaderClasses", "useLoader", "isFocused", "focus", "blur", "useFocus", "control", "ref", "inputRef", "isForcedColorsModeActive", "IN_BROWSER", "window", "matchMedia", "matches", "loaderColor", "toRef", "color", "uid", "useId", "id", "onChange", "onTrackClick", "e", "stopPropagation", "preventDefault", "input", "click", "useRender", "rootAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "VInput", "filterProps", "controlProps", "VSelectionControl", "_createVNode", "_mergeProps", "class", "$event", "style", "_ref2", "messagesId", "isDisabled", "isReadonly", "isValid", "slotProps", "undefined", "_ref3", "backgroundColorClasses", "backgroundColorStyles", "_createElementVNode", "_normalizeClass", "_normalizeStyle", "_ref4", "inputNode", "icon", "_Fragment", "thumb", "VDefaultsProvider", "VIcon", "size", "VScaleTransition", "LoaderSlot", "loader", "VProgressCircular", "isActive", "forwardRefs"]
}
