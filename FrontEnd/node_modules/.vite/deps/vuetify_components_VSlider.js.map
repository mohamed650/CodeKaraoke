{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlider/VSlider.tsx", "../../vuetify/src/components/VSlider/VSliderThumb.tsx", "../../vuetify/src/components/VSlider/slider.ts", "../../vuetify/src/components/VSlider/VSliderTrack.tsx"],
  "sourcesContent": ["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { makeSliderProps, useSlider, useSteps } from './slider'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useRtl } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSliderThumbSlots } from './VSliderThumb'\nimport type { VSliderTrackSlots } from './VSliderTrack'\nimport type { VInputSlot, VInputSlots } from '@/components/VInput/VInput'\n\nexport type VSliderSlots = VInputSlots & VSliderThumbSlots & VSliderTrackSlots & {\n  label: VInputSlot\n}\n\nexport const makeVSliderProps = propsFactory({\n  ...makeFocusProps(),\n  ...makeSliderProps(),\n  ...makeVInputProps(),\n\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n}, 'VSlider')\n\nexport const VSlider = genericComponent<VSliderSlots>()({\n  name: 'VSlider',\n\n  props: makeVSliderProps(),\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n    start: (value: number) => true,\n    end: (value: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const thumbContainerRef = ref<VSliderThumb>()\n    const inputRef = ref<VInput>()\n    const { rtlClasses } = useRtl()\n\n    const steps = useSteps(props)\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      value => {\n        return steps.roundValue(value == null ? steps.min.value : value)\n      },\n    )\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n      noKeyboard,\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value)\n      },\n      onSliderEnd: ({ value }) => {\n        const roundedValue = roundValue(value)\n        model.value = roundedValue\n        emit('end', roundedValue)\n      },\n      onSliderMove: ({ value }) => model.value = roundValue(value),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const inputProps = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          ref={ inputRef }\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? (\n                  props.label\n                    ? (\n                      <VLabel\n                        id={ slotProps.id.value }\n                        class=\"v-slider__label\"\n                        text={ props.label }\n                      />\n                    ) : undefined\n                )}\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ !!props.disabled }\n                  readonly={ !!props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  noKeyboard={ noKeyboard.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  ripple={ props.ripple }\n                  name={ props.name }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({\n      focus: () => thumbContainerRef.value?.$el.focus(),\n    }, inputRef)\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n", "// Styles\nimport './VSliderThumb.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\nimport { VScaleTransition } from '../transitions'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useElevation } from '@/composables/elevation'\nimport { useRtl } from '@/composables/locale'\n\n// Directives\nimport vRipple from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, genericComponent, keyValues, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\nexport type VSliderThumbSlots = {\n  'thumb-label': { modelValue: number }\n}\n\nexport const makeVSliderThumbProps = propsFactory({\n  focused: Boolean,\n  max: {\n    type: Number,\n    required: true,\n  },\n  min: {\n    type: Number,\n    required: true,\n  },\n  modelValue: {\n    type: Number,\n    required: true,\n  },\n  position: {\n    type: Number,\n    required: true,\n  },\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n  name: String,\n  noKeyboard: Boolean,\n\n  ...makeComponentProps(),\n}, 'VSliderThumb')\n\nexport const VSliderThumb = genericComponent<VSliderThumbSlots>()({\n  name: 'VSliderThumb',\n\n  directives: { vRipple },\n\n  props: makeVSliderThumbProps(),\n\n  emits: {\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const slider = inject(VSliderSymbol)\n    const { isRtl, rtlClasses } = useRtl()\n    if (!slider) throw new Error('[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider')\n\n    const {\n      min,\n      max,\n      thumbColor,\n      thumbLabelColor,\n      step,\n      disabled,\n      thumbSize,\n      thumbLabel,\n      direction,\n      isReversed,\n      vertical,\n      readonly,\n      elevation,\n      mousePressed,\n      decimals,\n      indexFromEnd,\n    } = slider\n\n    const elevationProps = computed(() => !disabled.value ? elevation.value : undefined)\n    const { elevationClasses } = useElevation(elevationProps)\n    const { textColorClasses, textColorStyles } = useTextColor(thumbColor)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(thumbLabelColor)\n\n    const { pageup, pagedown, end, home, left, right, down, up } = keyValues\n    const relevantKeys = [pageup, pagedown, end, home, left, right, down, up]\n\n    const multipliers = computed(() => {\n      if (step.value) return [1, 2, 3]\n      else return [1, 5, 10]\n    })\n\n    function parseKeydown (e: KeyboardEvent, value: number) {\n      if (props.noKeyboard) return\n      if (!relevantKeys.includes(e.key)) return\n\n      e.preventDefault()\n\n      const _step = step.value || 0.1\n      const steps = (max.value - min.value) / _step\n      if ([left, right, down, up].includes(e.key)) {\n        const increase = vertical.value\n          ? [isRtl.value ? left : right, isReversed.value ? down : up]\n          : indexFromEnd.value !== isRtl.value ? [left, up] : [right, up]\n        const direction = increase.includes(e.key) ? 1 : -1\n        const multiplier = e.shiftKey ? 2 : (e.ctrlKey ? 1 : 0)\n\n        if (direction === -1 && value === max.value && !multiplier && !Number.isInteger(steps)) {\n          value = value - (steps % 1) * _step\n        } else {\n          value = value + (direction * _step * multipliers.value[multiplier])\n        }\n      } else if (e.key === home) {\n        value = min.value\n      } else if (e.key === end) {\n        value = max.value\n      } else {\n        const direction = e.key === pagedown ? 1 : -1\n        value = value - (direction * _step * (steps > 100 ? steps / 10 : 10))\n      }\n\n      return Math.max(props.min, Math.min(props.max, value))\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const newValue = parseKeydown(e, props.modelValue)\n\n      newValue != null && emit('update:modelValue', newValue)\n    }\n\n    useRender(() => {\n      const positionPercentage = convertToUnit(indexFromEnd.value ? 100 - props.position : props.position, '%')\n\n      return (\n        <div\n          class={[\n            'v-slider-thumb',\n            {\n              'v-slider-thumb--focused': props.focused,\n              'v-slider-thumb--pressed': props.focused && mousePressed.value,\n            },\n            props.class,\n            rtlClasses.value,\n          ]}\n          style={[\n            {\n              '--v-slider-thumb-position': positionPercentage,\n              '--v-slider-thumb-size': convertToUnit(thumbSize.value),\n            },\n            props.style,\n          ]}\n          role=\"slider\"\n          tabindex={ disabled.value ? -1 : 0 }\n          aria-label={ props.name }\n          aria-valuemin={ min.value }\n          aria-valuemax={ max.value }\n          aria-valuenow={ props.modelValue }\n          aria-readonly={ !!readonly.value }\n          aria-orientation={ direction.value }\n          onKeydown={ !readonly.value ? onKeydown : undefined }\n        >\n          <div\n            class={[\n              'v-slider-thumb__surface',\n              textColorClasses.value,\n              elevationClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          />\n          <div\n            class={[\n              'v-slider-thumb__ripple',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n            v-ripple={[props.ripple, null, ['circle', 'center']]}\n          />\n          <VScaleTransition origin=\"bottom center\">\n            <div\n              class=\"v-slider-thumb__label-container\"\n              v-show={ (thumbLabel.value && props.focused) || thumbLabel.value === 'always' }\n            >\n              <div\n                class={[\n                  'v-slider-thumb__label',\n                  backgroundColorClasses.value,\n                ]}\n                style={ backgroundColorStyles.value }\n              >\n                <div>\n                  { slots['thumb-label']?.({ modelValue: props.modelValue }) ?? props.modelValue.toFixed(step.value ? decimals.value : 1) }\n                </div>\n                <div class=\"v-slider-thumb__label-wedge\" />\n              </div>\n            </div>\n          </VScaleTransition>\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderThumb = InstanceType<typeof VSliderThumb>\n", "/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from '@/composables/elevation'\nimport { useRtl } from '@/composables/locale'\nimport { makeRoundedProps } from '@/composables/rounded'\n\n// Utilities\nimport { computed, nextTick, provide, ref, shallowRef, toRef } from 'vue'\nimport { clamp, createRange, getDecimals, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, InjectionKey, PropType, Ref } from 'vue'\nimport type { VSliderTrack } from './VSliderTrack'\n\nexport type Tick = {\n  value: number\n  position: number\n  label?: string\n}\n\ntype SliderProvide = {\n  activeThumbRef: Ref<HTMLElement | undefined>\n  color: Ref<string | undefined>\n  decimals: Ref<number>\n  direction: Ref<'vertical' | 'horizontal'>\n  disabled: Ref<boolean | null | undefined>\n  elevation: Ref<number | string | undefined>\n  min: Ref<number>\n  max: Ref<number>\n  mousePressed: Ref<boolean>\n  noKeyboard: Ref<boolean>\n  numTicks: Ref<number>\n  onSliderMousedown: (e: MouseEvent) => void\n  onSliderTouchstart: (e: TouchEvent) => void\n  parseMouseMove: (e: MouseEvent | TouchEvent) => number | void\n  position: (val: number) => number\n  readonly: Ref<boolean | null | undefined>\n  rounded: Ref<boolean | number | string | undefined>\n  roundValue: (value: number) => number\n  thumbLabel: Ref<boolean | string | undefined>\n  showTicks: Ref<boolean | 'always'>\n  startOffset: Ref<number>\n  step: Ref<number>\n  thumbSize: Ref<number>\n  thumbColor: Ref<string | undefined>\n  thumbLabelColor: Ref<string | undefined>\n  trackColor: Ref<string | undefined>\n  trackFillColor: Ref<string | undefined>\n  trackSize: Ref<number>\n  ticks: Ref<readonly number[] | Record<string, string> | undefined>\n  tickSize: Ref<number>\n  trackContainerRef: Ref<VSliderTrack | undefined>\n  vertical: Ref<boolean>\n  parsedTicks: Ref<Tick[]>\n  hasLabels: Ref<boolean>\n  isReversed: Ref<boolean>\n  indexFromEnd: Ref<boolean>\n}\n\nexport const VSliderSymbol: InjectionKey<SliderProvide> = Symbol.for('vuetify:v-slider')\n\nexport function getOffset (e: MouseEvent | TouchEvent, el: HTMLElement, direction: string) {\n  const vertical = direction === 'vertical'\n  const rect = el.getBoundingClientRect()\n  const touch = 'touches' in e ? e.touches[0] : e\n  return vertical\n    ? touch.clientY - (rect.top + rect.height / 2)\n    : touch.clientX - (rect.left + rect.width / 2)\n}\n\nfunction getPosition (e: MouseEvent | TouchEvent, position: 'clientX' | 'clientY'): number {\n  if ('touches' in e && e.touches.length) return e.touches[0][position]\n  else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position]\n  else return (e as MouseEvent)[position]\n}\n\nexport const makeSliderProps = propsFactory({\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  error: Boolean,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  max: {\n    type: [Number, String],\n    default: 100,\n  },\n  min: {\n    type: [Number, String],\n    default: 0,\n  },\n  step: {\n    type: [Number, String],\n    default: 0,\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String] as PropType<boolean | 'always' | undefined>,\n    default: undefined,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20,\n  },\n  showTicks: {\n    type: [Boolean, String] as PropType<boolean | 'always'>,\n    default: false,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  ticks: {\n    type: [Array, Object] as PropType<readonly number[] | Record<number, string>>,\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2,\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4,\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  reverse: Boolean,\n  noKeyboard: Boolean,\n\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2,\n  }),\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n}, 'Slider')\n\ntype SliderProps = ExtractPropTypes<ReturnType<typeof makeSliderProps>>\n\ntype SliderData = {\n  value: number\n}\n\nexport const useSteps = (props: SliderProps) => {\n  const min = computed(() => parseFloat(props.min))\n  const max = computed(() => parseFloat(props.max))\n  const step = computed(() => Number(props.step) > 0 ? parseFloat(props.step) : 0)\n  const decimals = computed(() => Math.max(getDecimals(step.value), getDecimals(min.value)))\n\n  function roundValue (value: string | number) {\n    value = parseFloat(value)\n\n    if (step.value <= 0) return value\n\n    const clamped = clamp(value, min.value, max.value)\n    const offset = min.value % step.value\n    let newValue = Math.round((clamped - offset) / step.value) * step.value + offset\n\n    if (clamped > newValue && newValue + step.value > max.value) {\n      newValue = max.value\n    }\n\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value))\n  }\n\n  return { min, max, step, decimals, roundValue }\n}\n\nexport const useSlider = ({\n  props,\n  steps,\n  onSliderStart,\n  onSliderMove,\n  onSliderEnd,\n  getActiveThumb,\n}: {\n  props: SliderProps\n  steps: ReturnType<typeof useSteps>\n  onSliderEnd: (data: SliderData) => void\n  onSliderStart: (data: SliderData) => void\n  onSliderMove: (data: SliderData) => void\n  getActiveThumb: (e: MouseEvent | TouchEvent) => HTMLElement\n}) => {\n  const { isRtl } = useRtl()\n  const isReversed = toRef(() => props.reverse)\n  const vertical = computed(() => props.direction === 'vertical')\n  const indexFromEnd = computed(() => vertical.value !== isReversed.value)\n\n  const { min, max, step, decimals, roundValue } = steps\n\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10))\n  const tickSize = computed(() => parseInt(props.tickSize, 10))\n  const trackSize = computed(() => parseInt(props.trackSize, 10))\n  const numTicks = computed(() => (max.value - min.value) / step.value)\n  const disabled = toRef(() => props.disabled)\n\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color)\n  const thumbLabelColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor)\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color)\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color)\n\n  const mousePressed = shallowRef(false)\n\n  const startOffset = shallowRef(0)\n  const trackContainerRef = ref<VSliderTrack | undefined>()\n  const activeThumbRef = ref<HTMLElement | undefined>()\n\n  function parseMouseMove (e: MouseEvent | TouchEvent): number | void {\n    const el: HTMLElement = trackContainerRef.value?.$el\n\n    if (!el) return\n\n    const vertical = props.direction === 'vertical'\n    const start = vertical ? 'top' : 'left'\n    const length = vertical ? 'height' : 'width'\n    const position = vertical ? 'clientY' : 'clientX'\n\n    const {\n      [start]: trackStart,\n      [length]: trackLength,\n    } = el.getBoundingClientRect()\n    const clickOffset = getPosition(e, position)\n\n    // It is possible for left to be NaN, force to number\n    let clickPos = clamp((clickOffset - trackStart - startOffset.value) / trackLength) || 0\n\n    if (vertical ? indexFromEnd.value : indexFromEnd.value !== isRtl.value) clickPos = 1 - clickPos\n\n    return roundValue(min.value + clickPos * (max.value - min.value))\n  }\n\n  const handleStop = (e: MouseEvent | TouchEvent) => {\n    const value = parseMouseMove(e)\n    if (value != null) {\n      onSliderEnd({ value })\n    }\n\n    mousePressed.value = false\n    startOffset.value = 0\n  }\n\n  const handleStart = (e: MouseEvent | TouchEvent) => {\n    const value = parseMouseMove(e)\n    activeThumbRef.value = getActiveThumb(e)\n\n    if (!activeThumbRef.value) return\n\n    mousePressed.value = true\n\n    if (activeThumbRef.value.contains(e.target as Node)) {\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction)\n    } else {\n      startOffset.value = 0\n      if (value != null) {\n        onSliderMove({ value })\n      }\n    }\n\n    if (value != null) {\n      onSliderStart({ value })\n    }\n    nextTick(() => activeThumbRef.value?.focus())\n  }\n\n  const moveListenerOptions = { passive: true, capture: true }\n\n  function onMouseMove (e: MouseEvent | TouchEvent) {\n    const value = parseMouseMove(e)\n    if (value != null) {\n      onSliderMove({ value })\n    }\n  }\n\n  function onSliderMouseUp (e: MouseEvent) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    handleStop(e)\n\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.removeEventListener('mouseup', onSliderMouseUp)\n  }\n\n  function onSliderTouchend (e: TouchEvent) {\n    handleStop(e)\n\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.removeEventListener('touchend', onSliderTouchend as EventListener)\n  }\n\n  function onSliderTouchstart (e: TouchEvent) {\n    handleStart(e)\n\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.addEventListener('touchend', onSliderTouchend as EventListener, { passive: false })\n  }\n\n  function onSliderMousedown (e: MouseEvent) {\n    if (e.button !== 0) return\n\n    e.preventDefault()\n\n    handleStart(e)\n\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.addEventListener('mouseup', onSliderMouseUp, { passive: false })\n  }\n\n  const position = (val: number) => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100)\n  }\n\n  const showTicks = toRef(() => props.showTicks)\n  const parsedTicks = computed<Tick[]>(() => {\n    if (!showTicks.value) return []\n\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + (t * step.value)\n        return {\n          value,\n          position: position(value),\n        }\n      }) : []\n    }\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({ value: t, position: position(t), label: t.toString() }))\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: (props.ticks as Record<string, string>)[key],\n    }))\n  })\n\n  const hasLabels = computed(() => parsedTicks.value.some(({ label }) => !!label))\n\n  const data: SliderProvide = {\n    activeThumbRef,\n    color: toRef(() => props.color),\n    decimals,\n    disabled,\n    direction: toRef(() => props.direction),\n    elevation: toRef(() => props.elevation),\n    hasLabels,\n    isReversed,\n    indexFromEnd,\n    min,\n    max,\n    mousePressed,\n    noKeyboard: toRef(() => props.noKeyboard),\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(() => props.readonly),\n    rounded: toRef(() => props.rounded),\n    roundValue,\n    showTicks,\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabelColor,\n    thumbLabel: toRef(() => props.thumbLabel),\n    ticks: toRef(() => props.ticks),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical,\n  }\n\n  provide(VSliderSymbol, data)\n\n  return data\n}\n", "// Styles\nimport './VSliderTrack.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useRounded } from '@/composables/rounded'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Tick } from './slider'\n\nexport type VSliderTrackSlots = {\n  'tick-label': { tick: Tick, index: number }\n}\n\nexport const makeVSliderTrackProps = propsFactory({\n  start: {\n    type: Number,\n    required: true,\n  },\n  stop: {\n    type: Number,\n    required: true,\n  },\n\n  ...makeComponentProps(),\n}, 'VSliderTrack')\n\nexport const VSliderTrack = genericComponent<VSliderTrackSlots>()({\n  name: 'VSliderTrack',\n\n  props: makeVSliderTrackProps(),\n\n  emits: {},\n\n  setup (props, { slots }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider')\n\n    const {\n      color,\n      parsedTicks,\n      rounded,\n      showTicks,\n      tickSize,\n      trackColor,\n      trackFillColor,\n      trackSize,\n      vertical,\n      min,\n      max,\n      indexFromEnd,\n    } = slider\n\n    const { roundedClasses } = useRounded(rounded)\n\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles,\n    } = useBackgroundColor(trackFillColor)\n\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles,\n    } = useBackgroundColor(trackColor)\n\n    const startDir = computed(() => `inset-${vertical.value ? 'block' : 'inline'}-${indexFromEnd.value ? 'end' : 'start'}`)\n    const endDir = computed(() => vertical.value ? 'height' : 'width')\n\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%',\n      }\n    })\n\n    const trackFillWidth = computed(() => props.stop - props.start)\n\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%'),\n      }\n    })\n\n    const computedTicks = computed(() => {\n      if (!showTicks.value) return []\n\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value\n\n      return ticks.map((tick, index) => {\n        const directionValue = tick.value !== min.value && tick.value !== max.value ? convertToUnit(tick.position, '%') : undefined\n\n        return (\n          <div\n            key={ tick.value }\n            class={[\n              'v-slider-track__tick',\n              {\n                'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop,\n                'v-slider-track__tick--first': tick.value === min.value,\n                'v-slider-track__tick--last': tick.value === max.value,\n              },\n            ]}\n            style={{ [startDir.value]: directionValue }}\n          >\n            {\n              (tick.label || slots['tick-label']) && (\n                <div class=\"v-slider-track__tick-label\">\n                  { slots['tick-label']?.({ tick, index }) ?? tick.label }\n                </div>\n              )\n            }\n          </div>\n        )\n      })\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class={[\n            'v-slider-track',\n            roundedClasses.value,\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-slider-track-size': convertToUnit(trackSize.value),\n              '--v-slider-tick-size': convertToUnit(tickSize.value),\n            },\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-slider-track__background',\n              trackColorClasses.value,\n              {\n                'v-slider-track__background--opacity': !!color.value || !trackFillColor.value,\n              },\n            ]}\n            style={{\n              ...backgroundStyles.value,\n              ...trackColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-track__fill',\n              trackFillColorClasses.value,\n            ]}\n            style={{\n              ...trackFillStyles.value,\n              ...trackFillColorStyles.value,\n            }}\n          />\n\n          { showTicks.value && (\n            <div\n              class={[\n                'v-slider-track__ticks',\n                {\n                  'v-slider-track__ticks--always-show': showTicks.value === 'always',\n                },\n              ]}\n            >\n              { computedTicks.value }\n            </div>\n          )}\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderTrack = InstanceType<typeof VSliderTrack>\n"],
  "mappings": "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",
  "names": ["VSliderSymbol", "Symbol", "for", "getOffset", "e", "el", "direction", "vertical", "rect", "getBoundingClientRect", "touch", "touches", "clientY", "top", "height", "clientX", "left", "width", "getPosition", "position", "length", "changedTouches", "makeSliderProps", "propsFactory", "disabled", "type", "Boolean", "default", "error", "readonly", "max", "Number", "String", "min", "step", "thumbColor", "thumbLabel", "undefined", "validator", "v", "thumbSize", "showTicks", "ticks", "Array", "Object", "tickSize", "color", "trackColor", "trackFillColor", "trackSize", "includes", "reverse", "noKeyboard", "makeRoundedProps", "makeElevationProps", "elevation", "ripple", "useSteps", "props", "computed", "parseFloat", "decimals", "Math", "getDecimals", "value", "roundValue", "clamped", "clamp", "offset", "newValue", "round", "toFixed", "useSlider", "_ref", "steps", "onSliderStart", "onSliderMove", "onSliderEnd", "getActiveThumb", "isRtl", "useRtl", "isReversed", "toRef", "indexFromEnd", "parseInt", "numTicks", "thumbLabelColor", "mousePressed", "shallowRef", "startOffset", "trackContainerRef", "ref", "activeThumbRef", "parseMouseMove", "$el", "start", "trackStart", "trackLength", "clickOffset", "clickPos", "handleStop", "handleStart", "contains", "target", "nextTick", "focus", "moveListenerOptions", "passive", "capture", "onMouseMove", "onSliderMouseUp", "stopPropagation", "preventDefault", "window", "removeEventListener", "onSliderTouchend", "onSliderTouchstart", "addEventListener", "onSliderMousedown", "button", "val", "percentage", "isNaN", "parsedTicks", "Infinity", "createRange", "map", "t", "isArray", "label", "toString", "keys", "key", "hasLabels", "some", "_ref2", "data", "rounded", "provide", "makeVSliderThumbProps", "propsFactory", "focused", "Boolean", "max", "type", "Number", "required", "min", "modelValue", "position", "ripple", "Object", "default", "name", "String", "noKeyboard", "makeComponentProps", "VSliderThumb", "genericComponent", "directives", "vRipple", "props", "emits", "v", "setup", "_ref", "slots", "emit", "slider", "inject", "VSliderSymbol", "isRtl", "rtlClasses", "useRtl", "Error", "thumbColor", "thumbLabelColor", "step", "disabled", "thumbSize", "thumbLabel", "direction", "isReversed", "vertical", "readonly", "elevation", "mousePressed", "decimals", "indexFromEnd", "elevationProps", "computed", "value", "undefined", "elevationClasses", "useElevation", "textColorClasses", "textColorStyles", "useTextColor", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "pageup", "pagedown", "end", "home", "left", "right", "down", "up", "keyValues", "relevantKeys", "multipliers", "parseKeydown", "e", "includes", "key", "preventDefault", "_step", "steps", "increase", "multiplier", "shiftKey", "ctrlKey", "isInteger", "Math", "onKeydown", "newValue", "useRender", "positionPercentage", "convertToUnit", "_createElementVNode", "_normalizeClass", "class", "_normalizeStyle", "style", "_withDirectives", "circle", "center", "_createVNode", "VScaleTransition", "toFixed", "_vShow", "makeVSliderTrackProps", "propsFactory", "start", "type", "Number", "required", "stop", "makeComponentProps", "VSliderTrack", "genericComponent", "name", "props", "emits", "setup", "_ref", "slots", "slider", "inject", "VSliderSymbol", "Error", "color", "parsedTicks", "rounded", "showTicks", "tickSize", "trackColor", "trackFillColor", "trackSize", "vertical", "min", "max", "indexFromEnd", "roundedClasses", "useRounded", "backgroundColorClasses", "trackFillColorClasses", "backgroundColorStyles", "trackFillColorStyles", "useBackgroundColor", "trackColorClasses", "trackColorStyles", "startDir", "computed", "value", "endDir", "backgroundStyles", "trackFillWidth", "trackFillStyles", "convertToUnit", "computedTicks", "ticks", "slice", "reverse", "map", "tick", "index", "directionValue", "position", "undefined", "_createElementVNode", "_normalizeClass", "label", "useRender", "class", "_normalizeStyle", "style", "makeVSliderProps", "propsFactory", "makeFocusProps", "makeSliderProps", "makeVInputProps", "modelValue", "type", "Number", "String", "default", "VSlider", "genericComponent", "name", "props", "emits", "value", "v", "start", "end", "setup", "_ref", "slots", "emit", "thumbContainerRef", "ref", "inputRef", "rtlClasses", "useRtl", "steps", "useSteps", "model", "useProxiedModel", "undefined", "roundValue", "min", "max", "mousePressed", "onSliderMousedown", "onSliderTouchstart", "trackContainerRef", "position", "hasLabels", "readonly", "noKeyboard", "useSlider", "onSliderStart", "onSliderEnd", "_ref2", "roundedValue", "onSliderMove", "_ref3", "getActiveThumb", "$el", "isFocused", "focus", "blur", "useFocus", "trackStop", "computed", "useRender", "inputProps", "VInput", "filterProps", "hasPrepend", "label", "prepend", "_createVNode", "_mergeProps", "disabled", "class", "style", "slotProps", "_createElementVNode", "_Fragment", "VLabel", "id", "_ref4", "messagesId", "VSliderTrack", "VSliderThumb", "elevation", "ripple", "forwardRefs"]
}
