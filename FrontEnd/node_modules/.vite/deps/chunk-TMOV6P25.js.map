{
  "version": 3,
  "sources": ["../../vuetify/src/composables/rounded.ts", "../../vuetify/src/composables/density.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n  tile: Boolean,\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const tile = isRef(props) ? false : props.tile\n    const classes: string[] = []\n\n    if (tile || rounded === false) {\n      classes.push('rounded-0')\n    } else if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (typeof rounded === 'string' || rounded === 0) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n", "// Utilities\nimport { toRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst allowedDensities = [null, 'default', 'comfortable', 'compact'] as const\n\n// typeof allowedDensities[number] evaluates to any\n// when generating api types for whatever reason.\nexport type Density = null | 'default' | 'comfortable' | 'compact'\n\nexport interface DensityProps {\n  density?: Density\n}\n\n// Composables\nexport const makeDensityProps = propsFactory({\n  density: {\n    type: String as PropType<Density>,\n    default: 'default',\n    validator: (v: any) => allowedDensities.includes(v),\n  },\n}, 'density')\n\nexport function useDensity (\n  props: DensityProps,\n  name = getCurrentInstanceName(),\n) {\n  const densityClasses = toRef(() => {\n    return `${name}--density-${props.density}`\n  })\n\n  return { densityClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;AAmBO,IAAMA,mBAAmBC,aAAa;EAC3CC,SAAS;IACPC,MAAM,CAACC,SAASC,QAAQC,MAAM;IAC9BC,SAASC;EACX;EACAC,MAAML;AACR,GAAG,SAAS;AAEL,SAASM,WACdC,OAEa;AAAA,MADbC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAL,SAAAK,UAAA,CAAA,IAAGE,uBAAuB;AAE9B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,UAAMf,UAAUgB,MAAMP,KAAK,IAAIA,MAAMQ,QAAQR,MAAMT;AACnD,UAAMO,OAAOS,MAAMP,KAAK,IAAI,QAAQA,MAAMF;AAC1C,UAAMW,UAAoB,CAAA;AAE1B,QAAIX,QAAQP,YAAY,OAAO;AAC7BkB,cAAQC,KAAK,WAAW;IAC1B,WAAWnB,YAAY,QAAQA,YAAY,IAAI;AAC7CkB,cAAQC,KAAK,GAAGT,IAAI,WAAW;IACjC,WAAW,OAAOV,YAAY,YAAYA,YAAY,GAAG;AACvD,iBAAWiB,SAASb,OAAOJ,OAAO,EAAEoB,MAAM,GAAG,GAAG;AAC9CF,gBAAQC,KAAK,WAAWF,KAAK,EAAE;MACjC;IACF;AAEA,WAAOC;EACT,CAAC;AAED,SAAO;IAAEJ;EAAe;AAC1B;;;AC3CA,IAAMO,mBAAmB,CAAC,MAAM,WAAW,eAAe,SAAS;AAW5D,IAAMC,mBAAmBC,aAAa;EAC3CC,SAAS;IACPC,MAAMC;IACNC,SAAS;IACTC,WAAYC,OAAWR,iBAAiBS,SAASD,CAAC;EACpD;AACF,GAAG,SAAS;AAEL,SAASE,WACdC,OAEA;AAAA,MADAC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAGG,uBAAuB;AAE9B,QAAMC,iBAAiBC,MAAM,MAAM;AACjC,WAAO,GAAGN,IAAI,aAAaD,MAAMR,OAAO;EAC1C,CAAC;AAED,SAAO;IAAEc;EAAe;AAC1B;",
  "names": ["makeRoundedProps", "propsFactory", "rounded", "type", "Boolean", "Number", "String", "default", "undefined", "tile", "useRounded", "props", "name", "arguments", "length", "getCurrentInstanceName", "roundedClasses", "computed", "isRef", "value", "classes", "push", "split", "allowedDensities", "makeDensityProps", "propsFactory", "density", "type", "String", "default", "validator", "v", "includes", "useDensity", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "densityClasses", "toRef"]
}
